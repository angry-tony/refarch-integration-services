/*
* Build a new service component
 */

 
apply plugin: 'war'
apply plugin: 'liberty'
// apply plugin: 'neva.openjpa'

group = 'ibm.case.greencompute.customerms'
version = '1-0-SNAPSHOT'
description = 'Customer micro service for brown and green computes'

buildscript {
    repositories {
    		mavenLocal()
        mavenCentral()
        maven {
      		url "https://plugins.gradle.org/m2/"
    	    }
    }
    dependencies {
 		classpath 'org.apache.openjpa:openjpa:2.4.2' 		
 		classpath 'at.schmutterer.oss.gradle:gradle-openjpa:0.2.0'
        classpath 'net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:2.1'
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
    jcenter()
}

// Java compiler compliance level
sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    providedCompile fileTree(dir: 'lib', include: ['*.jar'])
    providedCompile group: 'javax.json', name: 'javax.json-api', version:'1.0'
    providedCompile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version:'2.0'
    providedCompile group: 'io.swagger', name: 'swagger-annotations', version:'1.5.3'
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.1.0'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5'
    libertyRuntime group: 'com.ibm.websphere.appserver.runtime', name: 'wlp-webProfile7', version: '17.0.0.2'
    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'org.apache.cxf', name: 'cxf-rt-rs-client', version:'3.1.1'
    testCompile "org.mockito:mockito-core:2.+" 
}

ext {
    // Liberty server properties
    wlpServerName = 'defaultServer'
    serverDirectory = "${project.buildDir}/wlp/usr/servers/${wlpServerName}"
    libertyTestPort = 9080
    // This is set in the ibm-web-ext.xml file
    warContext = 'caseserv'

}

sourceSets {
  main {
    output.classesDir   = 'src/main/webapp/WEB-INF/classes'
    resources {
      srcDirs = ['src/main/resources']
    }
  }
  test {
    resources {
      srcDirs = ['src/test/resources']
    }
  }
  integrationTest {
     java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
   }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}


// See https://github.com/schmutterer/gradle-openjpa
apply plugin:'openjpa'
openjpa {
      files = fileTree(sourceSets.main.output.classesDir).matching {
          include 'po/model/**'
      }
}

task processConfig(type: Copy) {
    from('src/main/config') {
        include '**/*'
    }
    into 'build/config/main'
}

test {
  jvmArgs "-javaagent:./lib/openjpa-all-2.4.2.jar"
  exclude 'dash/icp/**'
  exclude '**/itests/**'
}

// ensure that integration tests run all the time by specifying output is out of date
task integrationTest(type: Test) {

    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    systemProperties = ['liberty.test.port': libertyTestPort]
}

war {
  dependsOn openjpaEnhance
  rootSpec.exclude("**/lib/db2jcc4.jar")
  rootSpec.exclude("**/lib/derby.jar")
  rootSpec.exclude("**/classes/**/ut/**")
  rootSpec.exclude("**/classes/**tests/**")
  rootSpec.exclude("**/test/resources/**")
}

liberty {
    server{
        bootstrapProperties = ['default.http.port': libertyTestPort]
        configFile = file("src/main/liberty/config/server.xml")
        apps = [war]
        name = 'caseserv'
        features {
            name = ['apiDiscovery-1.0', 'jpa-2.0','jaxrs-2.0']
            acceptLicense = true
        }
     }
}

// avoid to fail the build if integration tests fail, as they may be unstable
check.dependsOn -= integrationTest
integrationTest.dependsOn libertyStart
integrationTest.mustRunAfter test
libertyStart.finalizedBy 'printMessageAboutRunningServer'
/*
check.dependsOn 'integrationTest'
integrationTest.dependsOn 'libertyStart', 'testClasses'
integrationTest.finalizedBy 'libertyStop'
libertyStart.dependsOn 'libertyPackage'
libertyPackage.dependsOn 'war'
libertyStart.finalizedBy 'printMessageAboutRunningServer'
*/

task printMessageAboutRunningServer {
    doLast {
        println "The server is now running at http://localhost:${libertyTestPort}/${warContext}"
        println "To stop the server run 'gradle libertyStop'"
    }
}
